{"version":3,"sources":["generate-random-number.js","common/react/chain-services.js","common/react/use-state.js","logo.svg","serviceWorker.js","index.js","App.js"],"names":["exports","generateRandomNumber","selectRandomByWeight","values","fromTo","weight","weights","total","reduce","t","i","Math","floor","random","j","length","slice","min","max","ret","push","cs","services","gather","filter","v","prev","first","last","name","fn","Array","isArray","Component","require","UseState","constructor","props","context","super","this","state","value","getInitValue","initValue","render","next","onChange","value1","cb","setState","module","Boolean","window","location","hostname","match","ReactDOM","_","h","num","className","onClick","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0FAmBAA,EAAQC,qBAhBqB,WACzB,OAAOC,EAAqB,CACxB,CACIC,OAAQC,EAAO,EAAG,IAClBC,OAAQ,IAEZ,CACIF,OAAQC,EAAO,GAAI,IACnBC,OAAQ,IAEZ,CACIF,OAAQC,EAAO,GAAI,KACnBC,OAAQ,OAOpB,IAAMH,EAAuB,SAACI,GAC1B,IAAMC,EAAQD,EAAQE,OAAO,SAACC,EAAD,UAAiBA,EAAjB,EAAKJ,QAAsB,GAElDK,EAAIC,KAAKC,MAAMD,KAAKE,SAAWN,GAE/BJ,EAAU,WACZ,IAAK,IAAIW,EAAI,EAAGA,EAAIR,EAAQS,OAAQD,IAChC,GAAIR,EAAQU,MAAM,EAAGF,EAAE,GAAGN,OAAO,SAACC,EAAD,UAAiBA,EAAjB,EAAKJ,QAAsB,IAAMK,EAC9D,OAAOJ,EAAQQ,GAAGX,OAHd,GAQhB,OAAOA,EAAOQ,KAAKC,MAAMD,KAAKE,SAAWV,EAAOY,UAG9CX,EAAS,SAACa,EAAKC,GAEjB,IADA,IAAIC,EAAM,GACDT,EAAIO,EAAKP,EAAIQ,EAAI,EAAGR,IACzBS,EAAIC,KAAKV,GAEb,OAAOS,I,gBCxCXnB,EAAQqB,GAHG,IAAIC,IACJC,EAAOD,EAASE,OAAOC,GAAGA,GAAI,IAIzC,MAAMF,EAAS,CAACD,EAAUI,KACtB,GAAwB,IAApBJ,EAASP,OACT,MAAM,MAEV,MAAOY,KAAUC,GAAQN,GAClBO,EAAMC,GAAMC,MAAMC,QAAQL,GAASA,EAAQ,CAAC,KAAMA,GAEzD,OAAOG,EAAGJ,EAAOP,GAAQI,EAAOK,EAAY,MAANC,EAAa,IAAIH,EAAM,CAACG,GAAOV,GAAOO,M,gBCZhF,MAAM,UAACO,GAAaC,EAAQ,GAqB5BlC,EAAQmC,SAnBR,cAAuBF,EAEnBG,YAAYC,EAAOC,GACfC,MAAMF,EAAOC,GAEbE,KAAKC,MAAQ,CACTC,MAAOL,EAAMM,aAAeN,EAAMM,eAAiBN,EAAMO,WAGjEC,SACI,MAAM,KAACC,GAAQN,KAAKH,OACd,MAACK,GAASF,KAAKC,MAErB,OAAOK,EAAK,CACRJ,QACAK,SAAU,CAACC,EAAQC,IAAOT,KAAKU,SAAS,CAACR,MAAOM,GAASC,Q,uECjBrEE,EAAOnD,QAAU,IAA0B,kC,mICYvBoD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASZ,OAAO,kBCCG,kBAAMxB,aACrB,CAAC,MAAO,SAACqC,EAAGZ,GAAJ,OAAaa,wBAAExB,WAAU,CAC7BQ,aAAc1C,uBACd6C,WAEJ,gBAAEc,EAAF,EAAEA,IAAF,OACI,yBACIC,UAAU,MACVC,QAAS,kBAAMF,EAAIb,SAAS9C,oCAE3B2D,EAAIlB,UDXD,MAASqB,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.81686dca.chunk.js","sourcesContent":["\n\n\nconst generateRandomNumber = () => {\n    return selectRandomByWeight([\n        {\n            values: fromTo(0, 10),\n            weight: 10,\n        },\n        {\n            values: fromTo(11, 20),\n            weight: 10,\n        },\n        {\n            values: fromTo(21, 100),\n            weight: 10,\n        },\n    ]);\n};\nexports.generateRandomNumber = generateRandomNumber;\n\n\nconst selectRandomByWeight = (weights) => {\n    const total = weights.reduce((t, {weight}) => t+weight, 0);\n\n    const i = Math.floor(Math.random() * total);\n\n    const values = (() => {\n        for (let j = 0; j < weights.length; j++) {\n            if (weights.slice(0, j+1).reduce((t, {weight}) => t+weight, 0) >= i) {\n                return weights[j].values;\n            }\n        }\n    })();\n\n    return values[Math.floor(Math.random() * values.length)];\n};\n\nconst fromTo = (min, max) => {\n    let ret = [];\n    for (let i = min; i < max+1; i++) {\n        ret.push(i);\n    }\n    return ret;\n};\n\n","const cs = (...services) => {\n    return gather(services.filter(v=>v), {});\n};\nexports.cs = cs;\n\nconst gather = (services, prev) => {\n    if (services.length === 0) {\n        throw 43525;\n    }\n    const [first, ...last] = services;\n    const [name, fn] = Array.isArray(first) ? first : [null, first];\n\n    return fn(prev, (ret) => gather(last, name!=null ? {...prev, [name]: ret} : prev));\n};\n","const {Component} = require(\"react\");\n\nclass UseState extends Component {\n\n    constructor(props, context) {\n        super(props, context);\n\n        this.state = {\n            value: props.getInitValue ? props.getInitValue() : props.initValue,\n        };\n    }\n    render() {\n        const {next} = this.props;\n        const {value} = this.state;\n\n        return next({\n            value,\n            onChange: (value1, cb) => this.setState({value: value1}, cb),\n        });\n    }\n}\nexports.UseState = UseState;\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport {App} from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, {createElement as h} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport {cs} from \"./common/react/chain-services\";\nimport {UseState} from \"./common/react/use-state\";\nimport {generateRandomNumber} from \"./generate-random-number\";\n\nexport const App = () => cs(\n    [\"num\", (_, next) => h(UseState, {\n        getInitValue: generateRandomNumber,\n        next,\n    })],\n    ({num}) => (\n        <div\n            className=\"App\"\n            onClick={() => num.onChange(generateRandomNumber())}\n        >\n            {num.value}\n        </div>\n    )\n);\n\n"],"sourceRoot":""}